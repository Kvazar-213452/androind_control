package com.example.myapplication

import android.content.Context
import android.media.MediaPlayer
import android.util.Log
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.Job
import kotlinx.coroutines.launch
import org.json.JSONObject
import java.io.File
import java.io.FileOutputStream
import java.net.HttpURLConnection
import java.net.URL
import java.net.URLEncoder

class TelegramBotManager(
    private val context: Context,
    private val mediaPlayer: MediaPlayer,
    private val exitCallback: () -> Unit,
    private val builtInSounds: Map<Int, Int>
) {
    private var lastUpdateId = 0
    private val dbFile = "db.json"
    private val musicDir = "music_files"
    private var botJob: Job? = null
    private var awaitingShutdownConfirmation = false
    private var shutdownChatId: Long = -1

    fun startBot() {
        File(context.getExternalFilesDir(null), musicDir).mkdirs()

        botJob = CoroutineScope(Dispatchers.IO).launch {
            val botToken = "7226888743:AAE_cqY8YEdDl438Eadla_FGMSzB9w5gkpE"
            while (true) {
                try {
                    val url = "https://api.telegram.org/bot$botToken/getUpdates?offset=${lastUpdateId + 1}"
                    val response = makeRequest(url)
                    Log.d("TelegramBot", "Response: $response")

                    val jsonResponse = JSONObject(response)
                    val result = jsonResponse.getJSONArray("result")
                    if (result.length() > 0) {
                        for (i in 0 until result.length()) {
                            val update = result.getJSONObject(i)
                            lastUpdateId = update.getInt("update_id")

                            if (update.has("message")) {
                                val message = update.getJSONObject("message")
                                val chatId = message.getJSONObject("chat").getLong("id")

                                if (message.has("text")) {
                                    val text = message.getString("text").trim()

                                    when {
                                        text.equals("#off", ignoreCase = true) -> {
                                            awaitingShutdownConfirmation = true
                                            shutdownChatId = chatId
                                            sendMessage(chatId, "‚ö†Ô∏è –í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–º–∫–Ω—É—Ç–∏ –¥–æ–¥–∞—Ç–æ–∫? –ù–∞–ø–∏—à—ñ—Ç—å #yes –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è", botToken)
                                        }
                                        text.equals("#yes", ignoreCase = true) && awaitingShutdownConfirmation && chatId == shutdownChatId -> {
                                            sendMessage(chatId, "üõë –í–∏–º–∏–∫–∞—é –¥–æ–¥–∞—Ç–æ–∫...", botToken)
                                            exitCallback()
                                        }
                                        text.startsWith("#ping", ignoreCase = true) -> {
                                            sendMessage(chatId, "jsw", botToken)
                                        }
                                        text.startsWith("#music", ignoreCase = true) -> {
                                            handleMusicCommand(text, chatId, botToken)
                                        }
                                        text.startsWith("#spin", ignoreCase = true) -> {
                                            handleSpinCommand(text, chatId, botToken)
                                        }
                                        text.startsWith("#data", ignoreCase = true) -> {
                                            val dbContent = readDbFile()
                                            sendMessage(chatId, "üìÅ –í–º—ñ—Å—Ç db.json:\n$dbContent", botToken)
                                        }
                                    }
                                }

                                if ((message.has("audio") ||
                                            (message.has("document") && message.getJSONObject("document")
                                                .getString("mime_type").contains("audio"))) &&
                                    message.has("caption") && message.getString("caption")
                                        .contains("#up_music")) {

                                    processMusicUpload(message, chatId, botToken)
                                }
                            }
                        }
                    }
                    kotlinx.coroutines.delay(2000)
                } catch (e: Exception) {
                    Log.e("TelegramBot", "–ü–æ–º–∏–ª–∫–∞: ${e.message}", e)
                }
            }
        }
    }

    private fun handleSpinCommand(text: String, chatId: Long, botToken: String) {
        val parts = text.split("\\s+".toRegex())
        if (parts.size >= 2) {
            try {
                val soundNum = parts[1].toInt()
                if (builtInSounds.containsKey(soundNum)) {
                    playBuiltInSound(soundNum, chatId, botToken)
                } else {
                    sendMessage(chatId, "‚ùå –ó–≤—É–∫ –∑ –Ω–æ–º–µ—Ä–æ–º #$soundNum –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", botToken)
                }
            } catch (e: NumberFormatException) {
                sendMessage(chatId, "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä—É. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: #spin [–Ω–æ–º–µ—Ä]", botToken)
            }
        } else {
            sendMessage(chatId, "‚ùå –í–∫–∞–∂—ñ—Ç—å –Ω–æ–º–µ—Ä –∑–≤—É–∫—É. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: #spin 1", botToken)
        }
    }

    private fun playBuiltInSound(soundNum: Int, chatId: Long, botToken: String) {
        try {
            val soundResId = builtInSounds[soundNum] ?: return

            // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Handler –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–¥—É –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É –ø–æ—Ç–æ—Ü—ñ
            android.os.Handler(context.mainLooper).post {
                try {
                    mediaPlayer.release() // –°–ø–æ—á–∞—Ç–∫—É –∑–≤—ñ–ª—å–Ω—è—î–º–æ —Å—Ç–∞—Ä–æ–≥–æ
                    val newMediaPlayer = MediaPlayer.create(context, soundResId)
                    newMediaPlayer?.start()
                    sendMessage(chatId, "üîä –ü—Ä–æ–≥—Ä–∞—é –≤–±—É–¥–æ–≤–∞–Ω–∏–π –∑–≤—É–∫ #$soundNum", botToken)
                } catch (e: Exception) {
                    sendMessage(chatId, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–æ–≥—Ä–∞–≤–∞–Ω–Ω—è –∑–≤—É–∫—É: ${e.message}", botToken)
                }
            }
        } catch (e: Exception) {
            sendMessage(chatId, "‚ùå –ü–æ–º–∏–ª–∫–∞: ${e.message}", botToken)
        }
    }

    fun stopBot() {
        botJob?.cancel()
    }

    private fun processMessage(message: org.json.JSONObject, botToken: String) {
        val chatId = message.getJSONObject("chat").getLong("id")

        if (message.has("text")) {
            val text = message.getString("text").trim()

            when {
                text.startsWith("#ping", ignoreCase = true) -> {
                    sendMessage(chatId, "jsw", botToken)
                }
                text.startsWith("#music", ignoreCase = true) -> {
                    handleMusicCommand(text, chatId, botToken)
                }
                text.startsWith("#data", ignoreCase = true) -> {
                    val dbContent = readDbFile()
                    sendMessage(chatId, "üìÅ –í–º—ñ—Å—Ç db.json:\n$dbContent", botToken)
                }
            }
        }

        if ((message.has("audio") ||
                    (message.has("document") && message.getJSONObject("document")
                        .getString("mime_type").contains("audio"))) &&
            message.has("caption") && message.getString("caption")
                .contains("#up_music")) {

            processMusicUpload(message, chatId, botToken)
        }
    }

    private fun handleMusicCommand(text: String, chatId: Long, botToken: String) {
        val parts = text.split("\\s+".toRegex())
        if (parts.size >= 2) {
            try {
                val musicNum = parts[1].toInt()
                playMusicFromDb(musicNum, chatId, botToken)
            } catch (e: NumberFormatException) {
                sendMessage(chatId, "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä—É. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: #music [–Ω–æ–º–µ—Ä]", botToken)
            }
        } else {
            sendMessage(chatId, "‚ùå –í–∫–∞–∂—ñ—Ç—å –Ω–æ–º–µ—Ä –º—É–∑–∏–∫–∏. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: #music 1", botToken)
        }
    }

    private fun playMusicFromDb(musicNum: Int, chatId: Long, botToken: String) {
        try {
            val dbContent = readDbFile()
            val dbJson = JSONObject(dbContent)
            val musicKey = "music_$musicNum"

            if (dbJson.has(musicKey)) {
                val filePath = dbJson.getString(musicKey)
                val musicFile = File(filePath)

                if (musicFile.exists()) {
                    if (mediaPlayer.isPlaying) {
                        mediaPlayer.stop()
                    }
                    mediaPlayer.reset()
                    mediaPlayer.setDataSource(filePath)
                    mediaPlayer.prepare()
                    mediaPlayer.start()
                    sendMessage(chatId, "üîä –ü—Ä–æ–≥—Ä–∞—é –º—É–∑–∏–∫—É #$musicNum: ${musicFile.name}", botToken)
                } else {
                    sendMessage(chatId, "‚ùå –§–∞–π–ª –º—É–∑–∏–∫–∏ #$musicNum –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", botToken)
                }
            } else {
                sendMessage(chatId, "‚ùå –ú—É–∑–∏–∫–∞ –∑ –Ω–æ–º–µ—Ä–æ–º #$musicNum –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑—ñ", botToken)
            }
        } catch (e: Exception) {
            sendMessage(chatId, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–æ–≥—Ä–∞–≤–∞–Ω–Ω—è: ${e.message}", botToken)
        }
    }

    private fun processMusicUpload(message: org.json.JSONObject, chatId: Long, botToken: String) {
        try {
            val fileInfo = if (message.has("audio")) {
                message.getJSONObject("audio")
            } else {
                message.getJSONObject("document")
            }

            val fileId = fileInfo.getString("file_id")
            val fileName = fileInfo.getString("file_name")
            val caption = message.getString("caption")

            val musicIndex = try {
                caption.split("#up_music")[1].trim().toInt()
            } catch (e: Exception) {
                sendMessage(chatId, "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: #up_music [–Ω–æ–º–µ—Ä]", botToken)
                return
            }

            val downloadedFile = downloadFile(fileId, botToken, fileName)
            if (downloadedFile != null) {
                saveToDb(musicIndex, downloadedFile.absolutePath)
                sendMessage(chatId, "‚úÖ –§–∞–π–ª $fileName –∑–±–µ—Ä–µ–∂–µ–Ω–æ —è–∫ –º—É–∑–∏–∫–∞ #$musicIndex", botToken)
            } else {
                sendMessage(chatId, "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É", botToken)
            }
        } catch (e: Exception) {
            sendMessage(chatId, "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ñ–∞–π–ª—É: ${e.message}", botToken)
        }
    }

    private fun downloadFile(fileId: String, botToken: String, fileName: String): File? {
        return try {
            val filePathUrl = "https://api.telegram.org/bot$botToken/getFile?file_id=$fileId"
            val filePathResponse = makeRequest(filePathUrl)
            val filePathJson = JSONObject(filePathResponse)
            val filePath = filePathJson.getJSONObject("result").getString("file_path")

            val fileUrl = "https://api.telegram.org/file/bot$botToken/$filePath"
            val connection = URL(fileUrl).openConnection() as HttpURLConnection
            connection.connect()

            val musicDir = File(context.getExternalFilesDir(null), musicDir)
            val outputFile = File(musicDir, fileName)

            val inputStream = connection.inputStream
            val outputStream = FileOutputStream(outputFile)

            inputStream.copyTo(outputStream)
            outputStream.close()
            inputStream.close()

            outputFile
        } catch (e: Exception) {
            Log.e("Download", "–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: ${e.message}")
            null
        }
    }

    private fun saveToDb(index: Int, filePath: String) {
        try {
            val dbFile = File(context.getExternalFilesDir(null), dbFile)
            val dbData = if (dbFile.exists()) {
                JSONObject(dbFile.readText())
            } else {
                JSONObject()
            }

            dbData.put("music_$index", filePath)
            dbFile.writeText(dbData.toString())
        } catch (e: Exception) {
            Log.e("DB", "–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ db.json: ${e.message}")
        }
    }

    private fun readDbFile(): String {
        return try {
            val dbFile = File(context.getExternalFilesDir(null), dbFile)
            if (dbFile.exists()) {
                dbFile.readText()
            } else {
                "{}"
            }
        } catch (e: Exception) {
            Log.e("DB", "–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è db.json: ${e.message}")
            "{}"
        }
    }

    private fun makeRequest(url: String): String {
        val connection = URL(url).openConnection() as HttpURLConnection
        connection.requestMethod = "GET"
        connection.connectTimeout = 10000
        connection.readTimeout = 10000
        return try {
            val inputStream = connection.inputStream
            val response = inputStream.bufferedReader().readText()
            inputStream.close()
            response
        } catch (e: Exception) {
            Log.e("HTTP", "–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É: ${e.message}")
            "{}"
        } finally {
            connection.disconnect()
        }
    }

    private fun sendMessage(chatId: Long, text: String, botToken: String) {
        try {
            val url = "https://api.telegram.org/bot$botToken/sendMessage"
            val params = "chat_id=$chatId&text=${URLEncoder.encode(text, "UTF-8")}"
            val connection = URL(url).openConnection() as HttpURLConnection
            connection.requestMethod = "POST"
            connection.doOutput = true
            connection.outputStream.write(params.toByteArray())
            connection.connect()

            if (connection.responseCode == HttpURLConnection.HTTP_OK) {
                Log.d("TelegramBot", "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!")
            }
            connection.disconnect()
        } catch (e: Exception) {
            Log.e("TelegramBot", "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: ${e.message}", e)
        }
    }
}
